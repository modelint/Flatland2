#!/usr/bin/env python3

import sys
import argparse
from pathlib import Path
from xUML_class_diagram import XumlClassDiagram

# Configure the expected parameters and actions for the argparse module
def parse(cl_input):
    parser = argparse.ArgumentParser(description='Flatland model diagram generator')
    parser.add_argument('-m', '--model', action='store', default='',
                        help='xUML model file name defining model connectivity without any layout information')
    parser.add_argument('-l', '--layout', action='store', default='',
                        help='Flatland layout file defining all layout information with light references to model file.')
    parser.add_argument('-o', '--output', action='store', default='',
                        help='Name of file to generate, .pdf extension automatically added')
    return parser.parse_args(cl_input)


if __name__ == "__main__":
    # Should be triggered from the terminal command line
    # Parse the command line args
    args = parse(sys.argv[1:])

    # model file: This can be provided via standard input or specified as an argument
    if args.model:
        model_path = Path(args.model)
        if not model_path.is_file():
            print(f"Model file: {args.model} specified on command line not found")
            sys.exit()
    else:
        model_path = sys.stdin

    # layout file: This must be specified as an argument
    if not args.layout:
        print("No flatland layout file specified on command line")
        sys.exit()

    # output file: If no output file is specified, the generated diagram is provided as standard output
    # For now, the only output format is PDF
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = sys.stdout

    # Generate the xUML class diagram
    cd = XumlClassDiagram(
        xuml_model_path=model_path,
        flatland_layout_path=args.layout,
        diagram_file_path=output_path
    )

    print("No problemo")
