// Model Style Sheet Arpeggio Clean Peg Grammar

// We assume that the input file has been pre-processed to remove
// comments, extraneous end of line space but newlines are left intact
// with a single newline added at the end to simplify our grammar

nl = "\n" // New line
space = r'[ \t]+' // Required at least one space, no newlines
number = r'[1-9][0-9]*' // Always a positive integer
indent = "    "  // For clarity
wdelim = r'[ _]' // Word delimiter to separate words in a name
word = r'[A-Za-z][A-Za-z0-9]*' // String of alpahnumeric text with no whitespace starting with alpha char
name = word (wdelim word)* // Sequence of delimited words forming a name
notch = '0' / ('+' / '-') number // A unit of alignment, center, or a positive or negative integer

diagram = "diagram" space name nl // The type of diagram to draw
notation =  "notation" space name nl // The notation to use in the diagram
presentation = "presentation" space name nl // The presentation style for drawing
sheet = "sheet" space name nl // The sheet size name
orientation = "orientation" space ("portrait" / "landscape") nl // The sheet orientation
layout_spec = (diagram notation presentation sheet orientation)# // Each of these in any order

valign = ">" ("top" / "bottom")
halign = ">" ("right" / "left")
node_align = valign space? halign / halign space? valign / valign / halign

nodes_header = "nodes" nl
node_loc = number ',' number  // Row and column
node_name = name
node_placement = indent node_name wrap? space node_loc (space node_align)? nl
node_block = nodes_header node_placement+

face =  "t" / "b" / "l" / "r" // top, bottom, left or right node face
dir = "+" / "-" // direction of increasing coord values, up and to the right is positive
csep = space ':' space // argument separator
node_face = face notch? "|" name // Where a stem attaches to a node face
tertiary_node = ',' space node_face
sname_place = dir wrap  // Side of stem axis and number of text lines after wrapping in stem name text block
wrap = '/' number // Number of lines to wrap an associated string
bend = '>' number // Bend in connector where 1 is at the tstem side increasing to the pstem side
cname_place = dir? name bend? // Side of connector axis and name of connector (since it is probably short)
stem_side = sname_place space node_face // Either the tstem or pstem layout
tstem = stem_side // one stem in a binary connector (t and p are arbitary names)
pstem = stem_side // the opposite stem in a binary connector
path = 'L' number (',' 'R' notch)?
paths = path (space path)*
leaf_faces = '[ ' node_face (', ' node_face)* ' ]'
trunk_face = node_face
tree_layout = trunk_face space leaf_faces (csep path)? // All layout info for a tree connector
binary_layout = tstem csep pstem tertiary_node? (csep paths)? // All layout info for a binary connector
connector_layout = indent cname_place csep (tree_layout / binary_layout) nl
connectors_header = "connectors" nl // starts section where connector layout info is specified
connector_block = connectors_header connector_layout+ // All

// You can draw unconnected nodes, connected nodes or a blank sheet
diagram_layout = layout_spec ((node_block connector_block) / (node_block))? EOF